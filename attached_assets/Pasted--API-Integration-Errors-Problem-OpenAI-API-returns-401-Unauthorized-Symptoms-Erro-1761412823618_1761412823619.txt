## API Integration Errors

### Problem: OpenAI API returns 401 Unauthorized

**Symptoms**:

```
Error: 401 Incorrect API key provided
```

**Cause**: Invalid or missing API key

**Solution**:

```bash
# 1. Verify API key format
# Should start with: sk-proj-...
echo $OPENAI_API_KEY

# 2. Test API key directly
curl https://api.openai.com/v1/models \
  -H "Authorization: Bearer $OPENAI_API_KEY"

# 3. If invalid, generate new key
# Visit: https://platform.openai.com/api-keys

# 4. Update .env.local
OPENAI_API_KEY=sk-proj-NEW_KEY_HERE

# 5. Restart server
```

**Prevention**:

- Never commit API keys to git
- Rotate keys periodically
- Use separate keys for dev/prod

---

### Problem: OpenAI API returns 429 Rate Limit Exceeded

**Symptoms**:

```
Error: 429 Rate limit reached for requests
```

**Cause**: Too many requests in short time

**Solution**:

```typescript
// Implement retry with exponential backoff
async function callOpenAIWithRetry(fn: () => Promise<any>, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (error: any) {
      if (error?.status === 429 && i < retries - 1) {
        const delay = 1000 * Math.pow(2, i); // 1s, 2s, 4s
        console.log(`Rate limited, retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      throw error;
    }
  }
}

// Usage
const response = await callOpenAIWithRetry(() =>
  client.chat.completions.create({...})
);
```

**Prevention**:

- Implement caching
- Add rate limiting on your side
- Upgrade OpenAI tier if needed

---

### Problem: Tavily API returns empty results

**Symptoms**:

```
[webSearch] Found 0 results
```

**Cause**: Query too specific, API issue, or rate limit

**Solution**:

```typescript
// 1. Test API key directly
curl -X POST https://api.tavily.com/search \
  -H "Content-Type: application/json" \
  -d '{
    "api_key": "tvly-YOUR_KEY",
    "query": "test query",
    "max_results": 5
  }'

// 2. Broaden search query
// Bad: "red Nike Air Max size 10 under $100"
// Good: "Nike Air Max shoes"

// 3. Check API status
// Visit: https://status.tavily.com

// 4. Add fallback
export async function webSearch(query: string, maxResults = 5) {
  const results = await tavilySearch(query, maxResults);

  if (results.length === 0) {
    console.warn(`No results for: "${query}"`);
    // Try broader query
    const broader = query.split(' ').slice(0, 3).join(' ');
    return await tavilySearch(broader, maxResults);
  }

  return results;
}
```

---

### Problem: Jina Reader returns empty content

**Symptoms**:

```
[fetchClean] Fetched 0 characters
```

**Cause**: Site blocks scrapers, page requires JavaScript, or URL invalid

**Solution**:

```typescript
// 1. Verify URL is accessible
curl -I https://example.com/page

// 2. Test Jina Reader directly
curl https://r.jina.ai/example.com/page

// 3. Add retry with different approach
export async function fetchClean(url: string): Promise<string> {
  // Try Jina first
  let content = await fetchViaJina(url);

  if (content.length === 0) {
    console.warn(`Jina failed for: ${url}`);
    // Fallback: direct fetch
    content = await fetchDirect(url);
  }

  return content;
}

async function fetchDirect(url: string): Promise<string> {
  const response = await fetch(url, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; Bot/1.0)'
    }
  });
  const html = await response.text();
  // Basic HTML stripping (not as good as Jina)
  return html.replace(/<[^>]*>/g, ' ').trim();
}
```

---

### Problem: Supabase connection timeout

**Symptoms**:

```
Error: connect ETIMEDOUT
```

**Cause**: Network issue, incorrect URL, or Supabase service down

**Solution**:

```bash
# 1. Test connection
curl https://YOUR_PROJECT.supabase.co/rest/v1/

# 2. Verify environment variables
echo $SUPABASE_URL
echo $SUPABASE_ANON_KEY

# 3. Check Supabase status
# Visit: https://status.supabase.com

# 4. Test with Supabase CLI
npx supabase projects list

# 5. Add timeout and retry
export const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!,
  {
    auth: { persistSession: false },
    global: {
      fetch: (...args) => {
        return Promise.race([
          fetch(...args),
          new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Timeout')), 5000)
          ),
        ]);
      },
    },
  }
);
```

---
