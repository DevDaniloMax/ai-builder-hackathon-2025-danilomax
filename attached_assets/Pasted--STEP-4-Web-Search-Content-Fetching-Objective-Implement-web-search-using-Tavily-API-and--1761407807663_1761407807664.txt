## STEP 4 â€” Web Search + Content Fetching

### Objective

Implement web search using Tavily API and content extraction using Jina Reader, with built-in caching for performance.

### Prerequisites

- STEP 3 completed
- Tavily API key configured in `.env.local`
- Internet connectivity for API calls

### Actions

#### 1. Create web utilities module

Create file `lib/web.ts`:

```typescript
import type { SearchResult } from "@/types/product";

// In-memory cache for API responses
const CACHE = new Map<string, any>();
const CACHE_TTL = 60 * 60 * 1000; // 1 hour in milliseconds

// Cache entry with timestamp
type CacheEntry<T> = {
  data: T;
  timestamp: number;
};

/**
 * Get cached data if not expired
 */
function getCached<T>(key: string): T | null {
  const entry = CACHE.get(key) as CacheEntry<T> | undefined;
  if (!entry) return null;

  const now = Date.now();
  if (now - entry.timestamp > CACHE_TTL) {
    CACHE.delete(key);
    return null;
  }

  return entry.data;
}

/**
 * Set cache with timestamp
 */
function setCache<T>(key: string, data: T): void {
  CACHE.set(key, {
    data,
    timestamp: Date.now(),
  } as CacheEntry<T>);
}

/**
 * Search web using Tavily API
 * @param query - Search query string
 * @param maxResults - Maximum number of results to return (default: 5)
 * @returns Array of search results with title, url, and snippet
 */
export async function webSearch(
  query: string,
  maxResults: number = 5
): Promise<SearchResult[]> {
  const cacheKey = `tavily:${query}:${maxResults}`;

  // Check cache first
  const cached = getCached<SearchResult[]>(cacheKey);
  if (cached) {
    console.log(`[webSearch] Cache hit for query: "${query}"`);
    return cached;
  }

  console.log(`[webSearch] Fetching from Tavily: "${query}"`);

  // Validate API key
  if (!process.env.TAVILY_API_KEY) {
    console.error("[webSearch] Missing TAVILY_API_KEY");
    return [];
  }

  try {
    const response = await fetch("https://api.tavily.com/search", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        api_key: process.env.TAVILY_API_KEY,
        query,
        max_results: maxResults,
        search_depth: "basic",
        include_answer: false,
        include_raw_content: false,
      }),
    });

    if (!response.ok) {
      console.error(`[webSearch] Tavily API error: ${response.status}`);
      return [];
    }

    const data = await response.json();
    const results: SearchResult[] = (data.results || []).map((item: any) => ({
      title: item.title || "",
      url: item.url || "",
      snippet: item.snippet || item.content || "",
    }));

    // Cache results
    setCache(cacheKey, results);

    console.log(`[webSearch] Found ${results.length} results`);
    return results;
  } catch (error) {
    console.error("[webSearch] Error:", error);
    return [];
  }
}

/**
 * Fetch clean page content using Jina Reader
 * @param url - Target URL to fetch
 * @returns Clean text content (max 12k characters)
 */
export async function fetchClean(url: string): Promise<string> {
  const cacheKey = `jina:${url}`;

  // Check cache first
  const cached = getCached<string>(cacheKey);
  if (cached) {
    console.log(`[fetchClean] Cache hit for URL: ${url}`);
    return cached;
  }

  console.log(`[fetchClean] Fetching from Jina: ${url}`);

  try {
    // Remove protocol and construct Jina Reader URL
    const cleanUrl = url.replace(/^https?:\/\//, "");
    const jinaUrl = `https://r.jina.ai/${cleanUrl}`;

    const response = await fetch(jinaUrl, {
      headers: {
        "User-Agent": "Mozilla/5.0 (compatible; ChatCommerceBot/1.0)",
        Accept: "text/plain",
      },
      // Disable cache to get fresh content
      cache: "no-store",
    });

    if (!response.ok) {
      console.error(`[fetchClean] Jina Reader error: ${response.status}`);
      return "";
    }

    const text = await response.text();

    // Trim to 12k characters for token efficiency
    const trimmed = text.slice(0, 12000);

    // Cache result
    setCache(cacheKey, trimmed);

    console.log(`[fetchClean] Fetched ${trimmed.length} characters`);
    return trimmed;
  } catch (error) {
    console.error("[fetchClean] Error:", error);
    return "";
  }
}

/**
 * Clear cache (useful for testing)
 */
export function clearCache(): void {
  CACHE.clear();
  console.log("[Cache] Cleared");
}
```

### Validation

- [ ] File `lib/web.ts` exists and compiles
- [ ] No TypeScript errors
- [ ] Functions export correctly
- [ ] Cache mechanism works

**Validation commands:**

```bash
# Check file exists
ls -la lib/web.ts

# Test TypeScript compilation
npx tsc --noEmit

# Test webSearch function (requires Tavily API key)
# Create test file: test-web.js
cat > test-web.js << 'EOF'
import { webSearch, fetchClean } from './lib/web.js';

async function test() {
  console.log('Testing webSearch...');
  const results = await webSearch('backpacks', 3);
  console.log('Results:', results.length);

  if (results.length > 0) {
    console.log('\nTesting fetchClean...');
    const content = await fetchClean(results[0].url);
    console.log('Content length:', content.length);
  }
}

test().catch(console.error);
EOF

# Run test
node test-web.js
```

### Troubleshooting

**Problem**: `TAVILY_API_KEY` not found
**Solution**: Ensure environment variable is set and dev server is restarted.

**Problem**: Tavily API returns 429 (Rate Limit)
**Solution**: Wait and retry, or upgrade Tavily plan. Cache helps reduce API calls.

**Problem**: Jina Reader returns empty content
**Solution**: Some sites block scrapers. Try different URLs or implement fallback.

**Problem**: Fetch timeout on slow connections
**Solution**: Add timeout to fetch calls:

```typescript
const controller = new AbortController();
const timeout = setTimeout(() => controller.abort(), 10000);
const response = await fetch(url, { signal: controller.signal });
clearTimeout(timeout);
```

### Expected Outputs

Test execution should show:

```
Testing webSearch...
[webSearch] Fetching from Tavily: "backpacks"
[webSearch] Found 3 results
Results: 3

Testing fetchClean...
[fetchClean] Fetching from Jina: https://example.com/backpacks
[fetchClean] Fetched 12000 characters
Content length: 12000
```

Cache should work on second run:

```
[webSearch] Cache hit for query: "backpacks"
[fetchClean] Cache hit for URL: https://example.com/backpacks
```

---
