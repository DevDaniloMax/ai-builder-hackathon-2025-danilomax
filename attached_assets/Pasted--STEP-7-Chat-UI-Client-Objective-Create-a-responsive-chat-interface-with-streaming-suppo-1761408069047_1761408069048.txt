## STEP 7 â€” Chat UI (Client)

### Objective

Create a responsive chat interface with streaming support using the AI SDK's `useChat` hook.

### Prerequisites

- STEP 6 completed (API endpoint working)
- Next.js app router configured

### Actions

#### 1. Create main page component

Replace `app/page.tsx` with:

```typescript
"use client";

import { useChat } from "ai/react";
import { useEffect, useRef } from "react";

export default function ChatPage() {
  const { messages, input, handleInputChange, handleSubmit, isLoading, error } =
    useChat({
      api: "/api/chat",
      onError: (error) => {
        console.error("Chat error:", error);
      },
    });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="flex flex-col h-screen max-w-4xl mx-auto">
      {/* Header */}
      <header className="border-b p-4 bg-white shadow-sm">
        <h1 className="text-2xl font-bold text-gray-800">
          {process.env.NEXT_PUBLIC_APP_NAME || "ChatCommerce AI"}
        </h1>
        <p className="text-sm text-gray-600">
          Your AI-powered shopping assistant
        </p>
      </header>

      {/* Messages Container */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
        {messages.length === 0 && (
          <div className="text-center text-gray-500 mt-8">
            <p className="text-lg mb-4">
              ðŸ‘‹ Welcome! How can I help you shop today?
            </p>
            <div className="space-y-2 text-sm">
              <p className="text-gray-400">Try asking:</p>
              <div className="flex flex-wrap gap-2 justify-center">
                <button
                  onClick={() =>
                    handleInputChange({
                      target: {
                        value: "Find me waterproof backpacks under $200",
                      },
                    } as any)
                  }
                  className="px-3 py-1 bg-white border rounded-full hover:bg-gray-100"
                >
                  Waterproof backpacks under $200
                </button>
                <button
                  onClick={() =>
                    handleInputChange({
                      target: {
                        value: "I need 50 hygiene kits under $30 each",
                      },
                    } as any)
                  }
                  className="px-3 py-1 bg-white border rounded-full hover:bg-gray-100"
                >
                  50 hygiene kits under $30
                </button>
                <button
                  onClick={() =>
                    handleInputChange({
                      target: {
                        value: "Show me laptop bags with USB charging",
                      },
                    } as any)
                  }
                  className="px-3 py-1 bg-white border rounded-full hover:bg-gray-100"
                >
                  Laptop bags with USB
                </button>
              </div>
            </div>
          </div>
        )}

        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${
              message.role === "user" ? "justify-end" : "justify-start"
            }`}
          >
            <div
              className={`max-w-[80%] rounded-lg px-4 py-3 ${
                message.role === "user"
                  ? "bg-blue-600 text-white"
                  : "bg-white border shadow-sm"
              }`}
            >
              {message.role === "assistant" && (
                <div className="flex items-center gap-2 mb-2 text-xs text-gray-500">
                  <div className="w-6 h-6 rounded-full bg-gradient-to-br from-purple-400 to-blue-500 flex items-center justify-center text-white font-bold">
                    AI
                  </div>
                  <span>ChatCommerce AI</span>
                </div>
              )}
              <div
                className={`prose prose-sm max-w-none ${
                  message.role === "user" ? "prose-invert" : ""
                }`}
                dangerouslySetInnerHTML={{
                  __html: message.content
                    .replace(/\n/g, "<br />")
                    .replace(
                      /\[([^\]]+)\]\(([^)]+)\)/g,
                      '<a href="$2" target="_blank" rel="noopener noreferrer" class="underline hover:text-blue-600">$1</a>'
                    )
                    .replace(/\*\*([^*]+)\*\*/g, "<strong>$1</strong>"),
                }}
              />
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-white border rounded-lg px-4 py-3 shadow-sm">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                <div
                  className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                  style={{ animationDelay: "0.1s" }}
                />
                <div
                  className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                  style={{ animationDelay: "0.2s" }}
                />
              </div>
            </div>
          </div>
        )}

        {error && (
          <div className="flex justify-center">
            <div className="bg-red-50 border border-red-200 rounded-lg px-4 py-3 text-red-700">
              <p className="font-semibold">Error:</p>
              <p className="text-sm">{error.message}</p>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Form */}
      <div className="border-t bg-white p-4 shadow-lg">
        <form onSubmit={handleSubmit} className="flex gap-2">
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            placeholder="E.g., 'I need 50 hygiene kits under $30 each'"
            className="flex-1 border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={isLoading || !input.trim()}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            {isLoading ? "..." : "Send"}
          </button>
        </form>
        <p className="text-xs text-gray-500 mt-2 text-center">
          Powered by OpenAI GPT-4o-mini â€¢ Real-time web search via Tavily
        </p>
      </div>
    </div>
  );
}
```

#### 2. Add minimal global styles

Update `app/globals.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-start-rgb));
}

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 249, 250, 251;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 17, 24, 39;
  }
}
```

#### 3. Install Tailwind CSS (if not already installed)

```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

Update `tailwind.config.js`:

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

### Validation

- [ ] File `app/page.tsx` exists and compiles
- [ ] UI renders without errors
- [ ] Input field accepts text
- [ ] Messages display correctly
- [ ] Streaming works in real-time
- [ ] Auto-scroll works

**Validation commands:**

```bash
# Check files exist
ls -la app/page.tsx app/globals.css

# Test TypeScript compilation
npx tsc --noEmit

# Start dev server
npm run dev

# Open browser
open http://localhost:3000
```

**Manual testing**:

1. Open `http://localhost:3000`
2. Type a query: "Find me waterproof backpacks under $200"
3. Click Send
4. Verify:
   - Message appears immediately
   - Assistant response streams in
   - Links are clickable
   - Auto-scrolls to bottom

### Troubleshooting

**Problem**: `useChat` hook not found
**Solution**: Ensure `ai` package installed:

```bash
npm install ai
```

**Problem**: Tailwind styles not applied
**Solution**: Verify `tailwind.config.js` and restart dev server.

**Problem**: Streaming not working
**Solution**: Check browser network tab for SSE connection. Verify API endpoint returns correct headers.

**Problem**: Links not rendering correctly
**Solution**: Check markdown-to-HTML regex in code. Use proper markdown format in assistant responses.

### Expected Outputs

Browser should display:

- Clean chat interface
- Header with app name
- Message history
- Input field with placeholder
- Send button

After sending message:

- User message appears (blue, right-aligned)
- Loading indicator shows
- Assistant response streams in word by word
- Products display with clickable links

---
